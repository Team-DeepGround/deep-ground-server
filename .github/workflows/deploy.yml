name: Deploy
on:
  push:
    branches: [ "main"]

permissions:
  contents: read

env:
  working-directory: .

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
       # GitHub 저장소 코드 내려받기
      - name: Checkout Repository
        uses: actions/checkout@v3
        # JDK version 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
        # Gradle caching - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-    
        # Gradle로 프로젝트 빌드
      - name: Build with Gradle
        run: ./gradlew build
      - name: application.yml 생성
        run: |
            mkdir -p ./src/main/resources && cd $_
            touch ./application.yml
            echo "${{ secrets.STAGING_YML }}" > ./application.yml
            cat ./application.yml
          working-directory: ${{ env.working-directory }}
        # Docker 빌드를 위한 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        # Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        #  Docker 이미지 빌드 + 푸시
      - name: Build and Push Docker Image
        uses: docker:build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:${{ github.ref_name }}
            ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest
          labels: version=${{ github.ref_name }}
        # EC2에 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          script: |
            cd /home/ubuntu/deploy

            echo "${{ secrets.ENV }}" | base64 -d > .env
            chmod 600 .env # .env 

            chmod +x deploy.sh
            ./deploy.sh

            rm .env
