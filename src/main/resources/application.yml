server:
  port: 8080
  servlet:
    context-path: /api/${api.version}
  name: studen
  forward-headers-strategy: framework
  tomcat:
    threads:
      max: 400
      min-spare: 20
    max-connections: 10000
    accept-count: 200
    connection-timeout: 20000

api:
  version: v1

spring:
  servlet:
    multipart:
      max-file-size: 20MB
      max-request-size: 20MB
  config:
    import: optional:file:./.env[.properties]
  datasource:
    url: ${MYSQL_DATABASE_URL}
    username: ${MYSQL_USERNAME}
    password: ${MYSQL_PASSWORD}
    hikari:
      maximum-pool-size: 50
      minimum-idle: 10
      idle-timeout: 300000
      connection-timeout: 30000
      max-lifetime: 1200000
  task:
    execution:
      pool:
        core-size: 20
        max-size: 100
        queue-capacity: 200
        keep-alive: 60s
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        default_batch_fetch_size: 500
        format_sql: true
        use_sql_comments: true
    open-in-view: false
    show-sql: false
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD}
    mongodb:
      host: ${MONGO_HOST}
      port: ${MONGO_PORT}
      database: ${MONGO_DATABASE}
      username: ${MONGO_USERNAME}
      password: ${MONGO_PASSWORD}
      auto-index-creation: true
  mail:
    host: smtp.daum.com
    port: 465
    username: ${EMAIL_USERNAME}
    password: ${EMAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
  ai:
    openai:
      api-key: ${OPENAI_API_KEY}
      base-url: https://api.openai.com/v1
      chat:
        options:
          model: gpt-4o-mini
      embedding:
        options:
          model: text-embedding-3-small

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/auth/oauth/google/callback"
            scope:
              - email
              - profile
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/auth/oauth/kakao/callback"
            scope:
              - profile_nickname
            provider: kakao
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/auth/oauth/naver/callback"
            scope:
              - name
              - email
            provider: naver
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

# JWT 설정
jwt:
  secret: ${JWT_SECRET}
  access-token-validity-in-seconds: ${JWT_ACCESS_TOKEN_VALIDITY_IN_SECONDS}
  refresh-token-validity-in-seconds: ${JWT_REFRESH_TOKEN_VALIDITY_IN_SECONDS}

# CORS 설정
cors:
  allowed-origins: ${CORS_ALLOWED_ORIGIN}
  allowed-methods: GET,POST,PUT,DELETE,OPTIONS,PATCH
  allowed-headers: '*'
  max-age: 3600

# Swagger 설정
swagger:
  server:
    url: ${SWAGGER_SERVER_URL:http://localhost:8080/api/v1}

# OAuth 설정
app:
  oauth2:
    authorized-redirect-uri: ${OAUTH2_AUTHORIZED_REDIRECT_URI}

#AWS S3 관련 설정
cloud:
  aws:
    s3:
      bucketName: ${BUCKET_NAME}
    credentials:
      access-key: ${ACCESS_KEY}
      secret-key: ${SECRET_KEY}
    region:
      static: ap-northeast-2
    stack:
      auto: false

management:
  endpoints:
    web:
      exposure:
        include: "prometheus,health,metrics"
  metrics:
    enable:
      processor: false
      system: false


