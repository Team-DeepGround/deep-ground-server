services:
  api-server:
    image: wjd5107/deepground-server:latest
    ports:
      - "8080:8080"
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/path=/api/v1/actuator/prometheus"
    env_file:
      - .env
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    networks:
      - monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus-data:/prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    networks:
      - monitoring
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped
  # 사용자권한은 따로 설정 X
  loki:
    image: grafana/loki:3.4.1 #Docker Image 버전
    container_name: loki
    networks:
      - monitoring
    ports:
      - "3100:3100"
    volumes: #데이터 저장 방식
      - ./loki/loki-config.yaml:/etc/loki/config.yaml
      - loki-data:/loki
    restart: unless-stopped
    command: #설정파일 경로
      - -config.file=/etc/loki/config.yaml

  alertmanager:
    image: prom/alertmanager:v0.27.0
    container_name: alertmanager
    networks:
      - monitoring
    restart: unless-stopped
    environment:
      - SMTP_PASSWORD=${SMTP_PASSWORD}
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/:/config/
      - alertmanager-data:/data
    command:
      - '--config.file=/config/alertmanager.yml'
      - '--storage.path=/data'

  node-exporter:
    image: prom/node-exporter:v1.8.1
    container_name: node-exporter
    networks:
      - monitoring
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    # Prometheus와 같은 네트워크에 있어야 Prometheus가 접근 가능
    ports:
      - "9100:9100"

  promtail:
    image: grafana/promtail:3.4.1
    container_name: promtail
    networks:
      - monitoring
    restart: unless-stopped
    privileged: true
    user: "root"
    volumes:
      # 범용적인 도커 로그 수집
      - /var/run/docker.sock:/var/run/docker.sock:ro:z
      - /var/lib/docker/containers:/var/lib/docker/containers:ro:z

      # [수정] 호스트 시스템 로그 수집을 위해 /var/log 마운트 추가
      - /var/log:/var/log:ro

      # 설정 & 데이터를 폴더로 묶어 체계적 관리
      - ./promtail/promtail-config.yaml:/etc/promtail/promtail-config.yaml:ro
       # logFile을 어디까지 읽었는지 그 위치를 저장하는 폴더 (재시작시 로그 중복 전송 방지)
      - ./promtail/positions:/tmp
    command:
      - -config.file=/etc/promtail/promtail-config.yaml
      - -positions.file=/tmp/positions.yaml


volumes:
  grafana-data:
  loki-data:
  alertmanager-data:
  prometheus-data: